
# This is a prerequisite for Dockerfile.uses_react_node_modules
# Does a huge download because it builds node_modules for react.js (RUN npm install)
# 
# To build an image called save_this_react_node_modules from this dockerfile:
# -->>  sudo docker build -t save_this_react_node_modules -f Dockerfile.react_node_modules .
# If using docker-compose, above is not necessary, as it builds the image if needed.
# to load image from a file...  sudo docker load < /local/react_basic_image.tar
# FROM node:10-alpine 
# below, from "https://hub.docker.com/_/node?tab=tags&page=1&name=16.14.2-alpine3.14", has node 16.14.2 
#  loaded on linux image alpine3.14, which is a stripped down linux
# I found it very difficult to figure out these details, or to find which image to use as FROM
FROM node:16.14.2-alpine3.14
RUN mkdir /app
WORKDIR /app
# package.json has the stuff for react.js 
# It was previously created using "npx create-react-app my-app" 
# Now copy it from the host to the new container.
COPY package.json /app
# Now make the container install the react.js stuff, as specified by 
# package.json Takes a while and need a FAST INTERNET CONNECTION
# WARNING SOMETIMES NPM INSTALL FAILS AND THE COMPUTER NEEDS TO BE RESTARTED. SOME SORT OF NETWORK THING?
# WARNING SOMETIMES NPM INSTALL FAILS AND THE COMPUTER NEEDS TO BE RESTARTED. SOME SORT OF NETWORK THING?
# WARNING SOMETIMES NPM INSTALL FAILS AND THE COMPUTER NEEDS TO BE RESTARTED. SOME SORT OF NETWORK THING?
RUN npm install
# at this point the docker image now has everything needed for react.js
# Use is as -->   FROM react_node_modules   ... in the app dockerfile.
# No entrypoint exists because this image is only as starting point 
# for other images and is not intended to be run as-is.
